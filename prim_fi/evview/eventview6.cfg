
###############################################################################
#
# Qdiagem Event Viewer Module configuration file
#					(lines starting with '#' are considered as comments)
#					(default values are shown in [])
#					(lines ending with '\' are continueing in the next line(s))
###############################################################################

# Configuration parameters;
#	In this section every data consits of two parameters, where
#		v=fix value (valid if 's' is not defined or initially while the
#			signal is not set by a module)
#		s=signal name (the value of the signal overrides 'v' if the signal
#			is written; when the module starts the signals' values are set
#			to the value given with 'v')
#		Note that the signals are only used if the program is connected to
#	the Qdiagem server and the window controlling parameters can be overridden
#	(and the signals disabled) in the slot configurations.

# Module's priority (0-29)										[10, -]

PRIO: v=10  s=EVVI6_PRIO

# Print messages to logfile (0/1)								[0, -]
#			v=0 means don't print anything (except upon initialisation)
#			v=1 means print error messages

LOGF: v=0   s=EVVI6_LOGF

# Maximum number of lines in logfile (min 1)					[10000, -]
#			The logfile will be reopened after the given number of lines
#			had been written. (Backup will be created.)

FLEN: v=10000 s=EVVI6_FLEN

# Print messages to console (0/1)								[0, -]
#			v=0 means don't print anything (except upon initialisation)
#			v=1 means print error messages

LOGC: v=1   s=EVVI6_LOGC

# Console name													[-, -]
#			If not defined, the program's current console is assumed

#CNAM:  v=/dev/con1 s=EVVI6_CNAM

# Write messages to window										[1, -]
#			v=0 means don't print anything
#			v=1 means print error messages

LOGM: v=1   s=EVVI6_LOGM

#Evaluation sequence of input messages (0/1/2)		[2]
#	v=0 means that the database will be updated with contents of the
#		whole message, and the objects will be evaluated afterwards;
#		This is the fastest method, but the original sequence of the
#		signals' changes will be lost and recurring values to the same
#		signal and short pulses are filtered out;
#	v=1 processes a submessage (sent by the modules to the server in
#		the same second) as v=0 does for the entire message;
#	v=2 processes all siganls individually; in this case every
#		modification in the signals' state are noticed but consumes
#		somewhat more CPU time;

ESEQ:   v=0     s=EVVI6_ESEQ

# Override configuration data from the server's database (0/1)	[0, -]
#			If set to 1, the default initial values of all the configuration
#			signals listed in this file will be overriden with the values read
#			from the server upon startup.
#			Note: this value cannot be modified upon running; the signal can
#			only be used to display the given setting;

OVRD: v=0   s=EVVI6_OVRD

###############################################################################
# Status signal
#	If an error occurs, this signal will be set to a value according
#	to the error. Every bit represents a certain state. The meaning of
#	the different bits are:
#		0x0001 - File access error;
#		0x0002 - Insufficient memory;
#		0x0004 - Priority setting error;
#		0x0008 - Windows' resource error;
#		0x0010 - Other (internal) error;

STAT: s=EVVI6_STAT

# Status parameter; This text type of signal contains 			[-]
#			additional info to the error code; currently this is the file's
#			name if any file handling error occurs.

SPAR: s=EVVI6_SPAR


###############################################################################
#Slot parameters:

# Signal to display the server communication method
#	This signal shows how the other signals given as slot parameters
#	can be used; this method can be defined to every slot separately.
#		0 means that all signals are ignored
#		1 means that the signals will be set to the values defined in
#			the slots when the slot is loaded; afterwards the signal's
#			actual value determines the parameter;
#		2 means that the values stored in the slot are not used; these
#			parameters are overridden by the signals' actual values
#			when the slot is loaded
#		Note: this value cannot be modified externally upon running;
#	the signal can only be used to display the actual slot's setting;

SRVM:   s=EVVI6_SRVM

# Interval to check the event file for new
#	events (x100 msec; min 0)						[0]
#	If the event viewer is in on-line mode (see the 'Online' top
#	framebar button), it cyclically checks the actual (latest) event
#	file for new events. If the file's size is grown, the newly written
#	event records are checked against the appropriate filtering
#	parameters (defined during the slot configuration). If a record
#	passes the check, the elder rows are scrolled up and the new record
#	is drawn to the last row of the window; this way always the most
#	recent events are seen.
#		This parameter defines the interval for the program to check
#	whether new displayable events are written to the current file; 0
#	means no check, i.e. no automatic scrolling occurs.

FTMR:   v=10     s=EVVI6_FTMR

# Scroll limit (min 0)								[100]
#	When the event viewer is in on-line mode and the event file is
#	cyclically checked for new displayable events, the new lines are
#	individually checked against the filter specifications and drawn if
#	necessary. If many new events can be read from the file, sometimes
#	- depending on the actual slot configuration (number of rows to
#	display and filter patterns) - it is more efficient to redraw the
#	entire view at once then scroll and draw line-by-line. This value
#	defines how many new events should be present to disable scrolling.
#	0 means scrolling line-by-line.
#		Note that this parameter is used only if non-indexed filtering
#	is set (see 'INDX' below).

SCRL:   v=100   s=EVVI6_SCRL

# Restrict operation to the most recent
#	files (min 0)									[0]
#	The event viewer processes event files as a continuous data flow
#	(i.e only the event's date can refer to the file it is located in).
#	If this values is set, only the latest that many event files can be
#	inspected; elder ones are treated as if they were not existing at
#	all; they cannot be selected by the user and are disregarded during
#	positioning the window's view on the event flow. This flag can be
#	useful in cases where only a few events suit the defined filtering
#	conditions and many files should be scanned to fill all the lines
#	of the window. The value of 0 means no limit, i.e. all of the files
#	can be inspected.
#		Note that this parameter is ignored if the displayable event
#	range is limited in the 'Date' subwindow (see below).

RECF:   v=0     s=EVVI6_RECF



###############################################################################
# Window control parameters:

# Window's position's X coordinate (pixel; min 0)				[0, -]

XPOS: v=0   s=EVVI6_XPOS

# Window's position's Y coordinate (pixel; min 0)				[0, -]

YPOS: v=616 s=EVVI6_YPOS

# Number of rows (1-250)										[20, -]

ROWS: v=5     s=EVVI6_ROWS

# Number of coloumns (1-250)									[80, -]

COLS: v=125   s=EVVI6_COLS

# Window is moveable (0/1)										[1, -]

MOVE: v=1   s=EVVI6_MOVE

# Window is resizeableable (0/1)								[1, -]

RESI: v=1   s=EVVI6_RESI

# Window can be covered (0/1)									[1, -]

COVE: v=1   s=EVVI6_COVE

# Window can be closed (iconified or program terminated) (0/1)	[1, -]

CLOS: v=1   s=EVVI6_CLOS

# Enable horizontal scrollbar (0/1)								[1, -]

HSCR: v=0   s=EVVI6_HSCR

# Enable vertical scrollbar (0/1)								[1, -]

VSCR: v=1   s=EVVI6_VSCR

# Bring window to top if a new	event arrives (0/1)				[0, -]
#	 		(if covered or iconified)

FRNT: v=0   s=EVVI6_FRNT

# Automatically close child windows if covered (0/1)			[0, -]

CACL: v=0   s=EVVI6_CACL

# Enable configuring (0/1)										[1, -]

CNFG: v=1   s=EVVI6_CNFG

# Enable "Choose" button (0/1)						[1]
#	If this flag is set, the "Choose" button is available in the top
#	framebar (if 'CNFG' permits). By the use of this button other slots
#	can be selected to load.

CHOB:   v=1     s=EVVI6_CHOB

# Enable "Config" button (0/1)						[1]
#	If this flag is set, the "Config" button is available in the top
#	framebar (if 'CNFG' permits). By the use of this button the
#	currently loaded slot can be configured or new ones can be created.
#		Note that 'MODI' (see below) defines whether the modifications
#	are written back to the slot file or remain temporary.

CFGB:   v=1     s=EVVI6_CFGB

# Enable "Date" button (0/1)						[1]
#	If this flag is set, the "Date" button is available in the top
#	framebar (if 'CNFG' permits). By the use of this button the
#	starting and ending date of the displayed events can be limited.

DATB:   v=1     s=EVVI6_DATB

# Enable "Print" button (0/1)						[1]
#	If this flag is set, the "Print" button is available in the top
#	framebar (if 'CNFG' permits). By the use of this button different
#	parts of the event list can be sent printer.

PRNB:   v=1     s=EVVI6_PRNB

# Enable "Browse" button (0/1)						[1]
#	If this flag is set, the "Browse" button is available in the top
#	framebar (if 'CNFG' permits). By the use of this button the
#	contents of the event log files (ending to '.evlog') can be
#	inspected.

#BRWB:   v=1     s=EVVI6_BRWB

# Enable slot modification (0/1)					[1]
#	If this flag is set, the slot configuration window (if 'CNFG' and
#	'CFGB' enables to invoke it) will contain a 'Save' button in its
#	top framebar via which the modifications can be written back.
#	Otherwise the configuration is restricted to the event display and
#	filter defining functions, the other features are unavailable. In
#	the latter case a 'Done' button can be activated to finish the
#	configuration and the modifications are not written back to the
#	slot file; this way when the slot is later re-activated the
#	original settings will be in effect.

MODI:   v=1     s=EVVI6_MODI

# Reset date limits when loaded (0/1)				[1]
#	If the displayable range of the event list is limited to a specific
#	date interval (see the 'Date' button below), this flag defines
#	whether the limit is preserved or cleared when the new slot is
#	loaded.

DRES:   v=1     s=EVVI6_DRES

# Create temporary index files (0/1)				[0]
#	Event files contain pure textual records. Filtering is based on
#	regular expressions. The event viewer assumes that always the
#	latest events are the most important to the user, and, as a
#	consequence, it usually reads the files backwards, from their end
#	to their beginning. If large amount of data must be processed (e.g.
#	when many records must be checked as only a few of them matches a
#	filtering condition), moving backward in the files can considerably
#	be slower than reading the files forward. In this case temporary
#	index files can be created by setting this switch. These files only
#	exist while the event files are inspected. In the case of really
#	large event files (containing more 10,000 records) the creation of
#	the index files may take some seconds but the program runs
#	significantly faster, especially when only a few records match the
#	filter. As a general rule, this flag is better enabled if filtering
#	is used.
#		Note that this switch overrides 'SCRL'.

INDX:   v=1     s=EVVI6_INDX

# Filtering can be aborted (0/1)					[0]
#	As the event viewer always tries to fill up its window with the
#	required events, by checking many files the filtering can be a
#	lengthy process if no indexfile is used. If this value is set, a
#	dialog window appears on the top of the main window in which the
#	filtering can be interrupted. If the use of indexfiles is allowed
#	(by the 'INDX' switch), the generation of the indexfile can be
#	aborted. After interrupting the filtering, the already found and
#	drawn lines remain visible.

ABRT:   v=1     s=EVVI6_ABRT

# Autosave configuration (0/1)									[0, -]

ASAV: v=1   s=EVVI6_ASAV

# Draw dividers around fields (0/1)					[0]
#	If this switch is set, every displayed event record and the fields
#	of the records will be separated by black lines; i.e. the event
#	list appears as a table.

DDIV:   v=1     s=EVVI6_DDIV

# Font typeface										[System]
#	This text type of signal may define the font's typeface the event
#	list is displayed with.

FNFC:   v=System    s=EVVI6_FNFC

# Font style (N/B/I/BI)								[N]
#	This text type of signal may define the font's style the event
#	list is displayed with. 'N' means normal, 'B' means bold, 'I'
#	means italic, while 'BI' means bold-italic style.

FNST:   v=N     s=EVVI6_FNST

# Font size (min 1)									[11]
#	This field defines the font's size (in pixels) the event list is
#	dispalyed with.

FNSZ:   v=11    s=EVVI6_FNSZ


###############################################################################
#	Slot definition parameters

#	Slot name													[-, -]
#			If the slot slot name is defined as a command-line argument,
#			it overrides 'v'; but if 'OVRD' is set the signal given with 's'
#			defines the slot's name to be loaded upon startup.

SLOT: v=PC31_FS_normal    s=EVVI6_SLOT

#	Slot configuration files' directory							[-, -]
#			Note: this value cannot be modified upon running; the signal can
#			only be used to display the given setting;

SLFD: v=/prim_fi/evview/slots     s=EVVI6_SLFD


###############################################################################
#Printers:

# Default printer
#	This field can define the default print device's name. If defined,
#	this printer is offered as the default every time a print function
#	is invoked. If undefined, the last used device (the last typed-in
#	name) is offered.

# PRNT: v=/dev/spool/hplj s=EVVI6_PRNT

###############################################################################
#Signal to trigger event files' reread:

# Reread trigger
#	Whenever this signal is written to non-zero and the event viewer
#	module is in Online mode (see the 'Online' button below), it
#	rereads and re-displays the event list. This feature can be useful
#	in cases when the event files are externally manipulated (sorted,
#	deleted etc.).

RRDT:   s=EVVI6_RRDT

